/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package NSalpha;

import java.awt.Image;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JToggleButton;

/**
 *
 * @author Bruce
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        this.Titles = null;
        initComponents();
    }

    public void SetPointDefault() {
        P1Points.setText("0");
        P2Points.setText("0");
        P3Points.setText("0");
        P4Points.setText("0");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jPanel1 = new javax.swing.JPanel();
        targetBox = new javax.swing.JDialog();
        jLabel2 = new javax.swing.JLabel();
        challengedPlayer = new javax.swing.JSpinner();
        selectPlayer = new javax.swing.JButton();
        gambleBox = new javax.swing.JDialog();
        noButton = new javax.swing.JButton();
        yesButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        playCard = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        displayBox = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        P1Points = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        P2Points = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        P3Points = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        P4Points = new javax.swing.JLabel();
        passTurn = new javax.swing.JButton();
        cardNumber = new javax.swing.JSpinner();
        playerTurn = new javax.swing.JLabel();
        showHand = new javax.swing.JToggleButton();
        switchPlayer = new javax.swing.JButton();
        playerSelect = new javax.swing.JSpinner();
        leftArrow = new javax.swing.JButton();
        rightArrow = new javax.swing.JButton();
        cardDisplayed = new javax.swing.JLabel();
        cardImage = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        targetBox.setMinimumSize(new java.awt.Dimension(275, 150));

        jLabel2.setText("Select a Player to target");

        challengedPlayer.setModel(new javax.swing.SpinnerNumberModel(1, 1, 4, 1));

        selectPlayer.setText("Select");
        selectPlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectPlayerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout targetBoxLayout = new javax.swing.GroupLayout(targetBox.getContentPane());
        targetBox.getContentPane().setLayout(targetBoxLayout);
        targetBoxLayout.setHorizontalGroup(
            targetBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, targetBoxLayout.createSequentialGroup()
                .addContainerGap(82, Short.MAX_VALUE)
                .addGroup(targetBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(targetBoxLayout.createSequentialGroup()
                        .addComponent(selectPlayer)
                        .addGap(18, 18, 18)
                        .addComponent(challengedPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2))
                .addGap(76, 76, 76))
        );
        targetBoxLayout.setVerticalGroup(
            targetBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(targetBoxLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(targetBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectPlayer)
                    .addComponent(challengedPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        gambleBox.setMinimumSize(new java.awt.Dimension(250, 150));

        noButton.setText("No");
        noButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noButtonActionPerformed(evt);
            }
        });

        yesButton.setText("Yes");
        yesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yesButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Was the Gamble Successfull?");

        javax.swing.GroupLayout gambleBoxLayout = new javax.swing.GroupLayout(gambleBox.getContentPane());
        gambleBox.getContentPane().setLayout(gambleBoxLayout);
        gambleBoxLayout.setHorizontalGroup(
            gambleBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, gambleBoxLayout.createSequentialGroup()
                .addContainerGap(61, Short.MAX_VALUE)
                .addGroup(gambleBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(gambleBoxLayout.createSequentialGroup()
                        .addComponent(noButton)
                        .addGap(44, 44, 44)
                        .addComponent(yesButton))
                    .addComponent(jLabel4))
                .addGap(52, 52, 52))
        );
        gambleBoxLayout.setVerticalGroup(
            gambleBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gambleBoxLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel4)
                .addGap(27, 27, 27)
                .addGroup(gambleBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(noButton)
                    .addComponent(yesButton))
                .addContainerGap(64, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(600, 1000));

        playCard.setText("Play");
        playCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playCardActionPerformed(evt);
            }
        });

        displayBox.setColumns(20);
        displayBox.setRows(5);
        jScrollPane1.setViewportView(displayBox);

        jLabel1.setText("Player 1");

        P1Points.setText("P1Points");

        jLabel3.setText("Player 2");

        P2Points.setText("P2Points");

        jLabel5.setText("Player 3");

        P3Points.setText("P3Points");

        jLabel7.setText("Player 4");

        P4Points.setText("P4Points");

        passTurn.setText("Pass");
        passTurn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passTurnActionPerformed(evt);
            }
        });

        cardNumber.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));

        playerTurn.setText("playerTurn");

        showHand.setText("Show Hand");
        showHand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showHandActionPerformed(evt);
            }
        });

        switchPlayer.setText("Switch Player");
        switchPlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                switchPlayerActionPerformed(evt);
            }
        });

        playerSelect.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));

        leftArrow.setText("leftArrow");
        leftArrow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftArrowActionPerformed(evt);
            }
        });

        rightArrow.setText("rightArrow");
        rightArrow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightArrowActionPerformed(evt);
            }
        });

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, cardNumber, org.jdesktop.beansbinding.ELProperty.create("${value}"), cardDisplayed, org.jdesktop.beansbinding.BeanProperty.create("text"), "test");
        bindingGroup.addBinding(binding);

        cardImage.setText("cardImage");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(220, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(passTurn)
                                    .addComponent(leftArrow))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(playerTurn)
                                                .addGap(18, 18, 18)
                                                .addComponent(switchPlayer))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(showHand)
                                                .addGap(50, 50, 50)
                                                .addComponent(playCard)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(cardNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(playerSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(15, 15, 15))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cardImage)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(rightArrow))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(18, 18, 18)
                                        .addComponent(P3Points)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(18, 18, 18)
                                        .addComponent(P1Points)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(cardDisplayed, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(63, 63, 63)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel7))
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(P4Points)
                                    .addComponent(P2Points))))
                        .addGap(25, 25, 25))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(P1Points))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(P3Points)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3)
                                .addComponent(P2Points))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(cardDisplayed, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(P4Points))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cardImage, javax.swing.GroupLayout.DEFAULT_SIZE, 364, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(leftArrow)
                                .addGap(23, 23, 23)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 266, Short.MAX_VALUE)
                        .addComponent(passTurn)
                        .addGap(68, 68, 68))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rightArrow)
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(playCard)
                            .addComponent(cardNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(showHand))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(playerTurn)
                            .addComponent(switchPlayer)
                            .addComponent(playerSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents
    String[] titles = new String[99];
    String[] descriptions = new String[99];
    String[] type = new String[99];
    String[] points = new String[99];
    Image[] Faces = new Image[99];
    List<String> TempList;
    List<String> Titles;
    List<String> Descriptions;
    List<String> Type;
    List<String> Points;
    //Card card = new Card("title","desc","type", 5);
    List<Card> Deck = new ArrayList<Card>();
    List<Card> p1Hand = new ArrayList<Card>();
    List<Card> p2Hand = new ArrayList<Card>();
    List<Card> p3Hand = new ArrayList<Card>();
    List<Card> p4Hand = new ArrayList<Card>();

    int player = 1;
    String tempPoints;
    Random rando = new Random();
    int randNum;
    boolean success;
    boolean pause;

    public void setTitles(String[] x) {
        for (int i = 0; i < x.length; i++) {
            titles[i] = x[i];
            Card card = new Card("temp", "temp", "temp", -100);
            Deck.add(card);
            Deck.get(i).setTitle(x[i]);
        }
        TempList = Arrays.asList(titles);

        Titles = new LinkedList<String>(TempList);
    }

    public void setDescriptions(String[] x) {
        for (int i = 0; i < x.length; i++) {
            descriptions[i] = x[i];
            Deck.get(i).setDescription(x[i]);
        }
        TempList = Arrays.asList(descriptions);

        Descriptions = new LinkedList<String>(TempList);
    }

    public void setType(String[] x) {
        for (int i = 0; i < x.length; i++) {
            type[i] = x[i];
            Deck.get(i).setType(x[i]);
        }
        TempList = Arrays.asList(type);

        Type = new LinkedList<String>(TempList);
    }

    public void setPoints(String[] x) {
        for (int i = 0; i < x.length; i++) {
            points[i] = x[i];
            if (x[i] == "Severity" || x[i] == "10-100") {
                Deck.get(i).setPoints(0);
            } else {
                Deck.get(i).setPoints(Integer.parseInt(x[i]));
            }
        }
        TempList = Arrays.asList(points);

        Points = new LinkedList<String>(TempList);
    }

    public void setFaces(Image[] x) {
        for (int i = 0; i < x.length; i++) {
            Faces[i] = x[i];
            Deck.get(i).setImage(x[i]);
        }
        TempList = Arrays.asList(descriptions);

        Descriptions = new LinkedList<String>(TempList);
    }

    public void firstCard() {
        /*int randNum = rando.nextInt(Titles.size());
         displayBox.append(Titles.get(randNum) + "\n" + Descriptions.get(randNum).toString() + "\n" + Type.get(randNum).toString() + "\n" + Points.get(randNum).toString() + "\n");
         tempPoints = Points.get(randNum);
         */
        /*for (int x = 0; x < p1Hand.size(); x++) {
         displayBox.append(p1Hand.get(x).getCardInfo());
         }
         */
        //playerTurn.setText("Player " + player);
    }

    public void setHand() {

        //ImageIcon resourse = new ImageIcon("C:\\Users\\Bruce\\Desktop\\Java\\NSalpha\\src\\NSalpha\\Cards\\3 Per Minute-1.png");
        //Image image = resourse.getImage(); // transform it 
        //Image newimg = image.getScaledInstance(289, 400, java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
        //resourse = new ImageIcon(newimg);
        //cardImage.setIcon(resourse);
        playerTurn.setText("Player " + player);
        int playerNum = 4;
        displayBox.setText(null);
        for (int x = 0; x <= playerNum; x++) {
            for (int i = 0; i < 3; i++) {
                int randNum = rando.nextInt(Titles.size());
                Card card = Deck.get(randNum);
                //displayBox.append(Titles.get(randNum) + "\n" + Descriptions.get(randNum).toString() + "\n" + Type.get(randNum).toString() + "\n" + Points.get(randNum).toString() + "\n==================\n");
                //Card card = new Card(Titles.get(randNum), Descriptions.get(randNum).toString(), Type.get(randNum).toString(), Integer.parseInt(Points.get(randNum)));
                switch (x) {

                    case 1:
                        p1Hand.add(card);
                        Titles.remove(randNum);
                        Descriptions.remove(randNum);
                        Type.remove(randNum);
                        Points.remove(randNum);
                        Deck.remove(randNum);
                        break;
                    case 2:
                        p2Hand.add(card);
                        Titles.remove(randNum);
                        Descriptions.remove(randNum);
                        Type.remove(randNum);
                        Points.remove(randNum);
                        Deck.remove(randNum);
                        break;
                    case 3:
                        p3Hand.add(card);
                        Titles.remove(randNum);
                        Descriptions.remove(randNum);
                        Type.remove(randNum);
                        Points.remove(randNum);
                        Deck.remove(randNum);
                        break;
                    case 4:
                        p4Hand.add(card);
                        Titles.remove(randNum);
                        Descriptions.remove(randNum);
                        Type.remove(randNum);
                        Points.remove(randNum);
                        Deck.remove(randNum);
                }
            }
        }

    }

    public void advancePlayer() {
        if (player < 4) {
            player++;
        } else {
            player = 1;
        }
    }

    public void addPoints(String i) {

        int temp;
        switch (player) {
            case 1:
                temp = Integer.parseInt(i) + Integer.parseInt(P1Points.getText());
                P1Points.setText(Integer.toString(temp));
                break;
            case 2:
                temp = Integer.parseInt(i) + Integer.parseInt(P2Points.getText());
                P2Points.setText(Integer.toString(temp));
                break;
            case 3:
                temp = Integer.parseInt(i) + Integer.parseInt(P3Points.getText());
                P3Points.setText(Integer.toString(temp));
                break;
            case 4:
                temp = Integer.parseInt(i) + Integer.parseInt(P4Points.getText());
                P4Points.setText(Integer.toString(temp));
                break;

        }

    }

    public Card nextCard(int randNum) {

        //displayBox.append(Titles.get(randNum) + "\n" + Descriptions.get(randNum).toString() + "\n" + Type.get(randNum).toString() + "\n" + Points.get(randNum).toString() + "\n");
        tempPoints = Points.get(randNum);
        Titles.remove(randNum);
        Descriptions.remove(randNum);
        Type.remove(randNum);
        Points.remove(randNum);
        return Deck.remove(randNum);

    }


    private void playCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playCardActionPerformed
        // TODO add your handling code here:
        randNum = rando.nextInt(Titles.size());
        int opponent;

        String cardType = null;

        //addPoints(tempPoints);
        switch (player) {
            case 1:
                cardType = p1Hand.get(Integer.parseInt(cardNumber.getValue().toString()) - 1).getType();
                switch (cardType) {
                    case "Self":
                        addPoints(Integer.toString(p1Hand.get(Integer.parseInt(cardNumber.getValue().toString()) - 1).getPoints()));
                        p1Hand.remove(Integer.parseInt(cardNumber.getValue().toString()) - 1);
                        p1Hand.add(nextCard(randNum));
                        break;
                    case "Gamble":
                        gambleBox.setVisible(true);
                        pause = true;
                        while (pause == true) {
                            break;
                        }

//code goes here
                        break;
                    case "Challenge":
                        targetBox.setVisible(true);
                        opponent = Integer.parseInt(challengedPlayer.getValue().toString());

                        break;
                }
                break;

            case 2:
                cardType = p2Hand.get(Integer.parseInt(cardNumber.getValue().toString()) - 1).getType();
                switch (cardType) {
                    case "Self":
                        addPoints(Integer.toString(p2Hand.get(Integer.parseInt(cardNumber.getValue().toString()) - 1).getPoints()));
                        p2Hand.remove(Integer.parseInt(cardNumber.getValue().toString()) - 1);
                        p2Hand.add(nextCard(randNum));
                        break;
                    case "Gamble":
                        targetBox.setVisible(true);
                        opponent = Integer.parseInt(challengedPlayer.getValue().toString());

                        break;
                    case "Challenge":
                        targetBox.setVisible(true);
                        opponent = Integer.parseInt(challengedPlayer.getValue().toString());

                        break;
                }
                break;
            case 3:
                cardType = p3Hand.get(Integer.parseInt(cardNumber.getValue().toString()) - 1).getType();
                switch (cardType) {
                    case "Self":
                        addPoints(Integer.toString(p3Hand.get(Integer.parseInt(cardNumber.getValue().toString()) - 1).getPoints()));
                        p3Hand.remove(Integer.parseInt(cardNumber.getValue().toString()) - 1);
                        p3Hand.add(nextCard(randNum));
                        break;
                    case "Gamble":
                        targetBox.setVisible(true);
                        opponent = Integer.parseInt(challengedPlayer.getValue().toString());

                        break;
                    case "Challenge":
                        targetBox.setVisible(true);
                        opponent = Integer.parseInt(challengedPlayer.getValue().toString());

                        break;
                }
                break;
            case 4:
                cardType = p4Hand.get(Integer.parseInt(cardNumber.getValue().toString()) - 1).getType();
                switch (cardType) {
                    case "Self":
                        addPoints(Integer.toString(p4Hand.get(Integer.parseInt(cardNumber.getValue().toString()) - 1).getPoints()));
                        p4Hand.remove(Integer.parseInt(cardNumber.getValue().toString()) - 1);
                        p4Hand.add(nextCard(randNum));
                        break;
                    case "Gamble":
                        targetBox.setVisible(true);
                        opponent = Integer.parseInt(challengedPlayer.getValue().toString());

                        break;
                    case "Challenge":
                        targetBox.setVisible(true);
                        opponent = Integer.parseInt(challengedPlayer.getValue().toString());

                        break;
                }
                break;
        }

        //P1Points.setText(Points.get(randNum));
        //displayBox.append(titles[randNum] + "\n" + descriptions[randNum] + "\n" + type[randNum] + "\n" + points[randNum] + "\n");
        advancePlayer();

        playerTurn.setText("Player " + player);
        System.out.println(Deck.size());
        displayBox.setText(null);
        showHand.setSelected(false);
        cardImage.setIcon(null);
        cardNumber.setValue(1);
        //displayBox.append(Titles.toString());
    }//GEN-LAST:event_playCardActionPerformed

    private void passTurnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passTurnActionPerformed
        int randNum = rando.nextInt(Titles.size());
        displayBox.setText(null);
        cardNumber.setValue(1);

        switch (player) {
            case 1:
                if (p1Hand.size() < 7) {
                    p1Hand.add(nextCard(randNum));
                }
                break;
            case 2:
                if (p2Hand.size() < 7) {
                    p2Hand.add(nextCard(randNum));
                }
                break;
            case 3:
                if (p3Hand.size() < 7) {
                    p3Hand.add(nextCard(randNum));
                }
                break;
            case 4:
                if (p4Hand.size() < 7) {
                    p4Hand.add(nextCard(randNum));
                }
                break;
        }

        if (player != 4) {
            player++;
        } else {
            player = 1;
        }

        System.out.println(Deck.size());
        playerTurn.setText("Player " + player);
        displayBox.setText(null);
        showHand.setSelected(false);
        cardImage.setIcon(null);
    }//GEN-LAST:event_passTurnActionPerformed

    private void showHandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showHandActionPerformed
        // TODO add your handling code here:
        JToggleButton displayButton = (JToggleButton) evt.getSource();
        if (displayButton.isSelected()) {
            displayBox.setText(null);
            cardImage.setText(null);
            switch (player) {
                case 1:
                    for (int x = 0; x < p1Hand.size(); x++) {
                        displayBox.append(p1Hand.get(x).getCardInfo());
                    }
                    Image newimg = p1Hand.get(Integer.parseInt(cardNumber.getValue().toString()) - 1).getImage().getScaledInstance(289, 400, java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
                    ImageIcon resourse = new ImageIcon(newimg);
                    cardImage.setIcon(resourse);
                    break;
                case 2:
                    for (int x = 0; x < p2Hand.size(); x++) {
                        displayBox.append(p2Hand.get(x).getCardInfo());
                    }
                    newimg = p2Hand.get(Integer.parseInt(cardNumber.getValue().toString()) - 1).getImage().getScaledInstance(289, 400, java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
                    resourse = new ImageIcon(newimg);
                    cardImage.setIcon(resourse);
                    break;
                case 3:
                    for (int x = 0; x < p3Hand.size(); x++) {
                        displayBox.append(p3Hand.get(x).getCardInfo());
                    }
                    newimg = p3Hand.get(Integer.parseInt(cardNumber.getValue().toString()) - 1).getImage().getScaledInstance(289, 400, java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
                    resourse = new ImageIcon(newimg);
                    cardImage.setIcon(resourse);
                    break;
                case 4:
                    for (int x = 0; x < p4Hand.size(); x++) {
                        displayBox.append(p4Hand.get(x).getCardInfo());
                    }
                    newimg = p4Hand.get(Integer.parseInt(cardNumber.getValue().toString()) - 1).getImage().getScaledInstance(289, 400, java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
                    resourse = new ImageIcon(newimg);
                    cardImage.setIcon(resourse);
                    break;
            }
        } else {
            displayBox.setText(null);
            cardImage.setIcon(null);
            cardImage.setText("Card Image");
        }
    }//GEN-LAST:event_showHandActionPerformed

    private void switchPlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switchPlayerActionPerformed
        // TODO add your handling code here:
        player = Integer.parseInt(playerSelect.getValue().toString());
        playerTurn.setText("Player " + player);
        displayBox.setText(null);
        showHand.setSelected(false);
        cardImage.setIcon(null);
    }//GEN-LAST:event_switchPlayerActionPerformed

    private void leftArrowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftArrowActionPerformed
        // TODO add your handling code here:

        if (1 < Integer.parseInt((cardNumber.getValue().toString()))) {
            switch (player) {
                case 1:
                    cardNumber.setValue(Integer.parseInt(cardNumber.getValue().toString()) - 1);
                    Image newimg = p1Hand.get(Integer.parseInt(cardNumber.getValue().toString()) - 1).getImage().getScaledInstance(289, 400, java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
                    ImageIcon resourse = new ImageIcon(newimg);
                    cardImage.setIcon(resourse);
                    break;
                case 2:
                    cardNumber.setValue(Integer.parseInt(cardNumber.getValue().toString()) - 1);
                    newimg = p2Hand.get(Integer.parseInt(cardNumber.getValue().toString()) - 1).getImage().getScaledInstance(289, 400, java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
                    resourse = new ImageIcon(newimg);
                    cardImage.setIcon(resourse);
                    break;
                case 3:
                    cardNumber.setValue(Integer.parseInt(cardNumber.getValue().toString()) - 1);
                    newimg = p3Hand.get(Integer.parseInt(cardNumber.getValue().toString()) - 1).getImage().getScaledInstance(289, 400, java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
                    resourse = new ImageIcon(newimg);
                    cardImage.setIcon(resourse);
                    break;
                case 4:
                    cardNumber.setValue(Integer.parseInt(cardNumber.getValue().toString()) - 1);
                    newimg = p4Hand.get(Integer.parseInt(cardNumber.getValue().toString()) - 1).getImage().getScaledInstance(289, 400, java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
                    resourse = new ImageIcon(newimg);
                    cardImage.setIcon(resourse);
                    break;
            }

        }

    }//GEN-LAST:event_leftArrowActionPerformed

    private void rightArrowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightArrowActionPerformed
        // TODO add your handling code here:
        List<Card> tempHand = new ArrayList<Card>();
        switch (player) {
            case 1:
                tempHand = p1Hand;
                break;
            case 2:
                tempHand = p2Hand;
                break;
            case 3:
                tempHand = p3Hand;
                break;
            case 4:
                tempHand = p4Hand;
                break;
        }
        if (tempHand.size() > Integer.parseInt((cardNumber.getValue().toString()))) {
            cardNumber.setValue(Integer.parseInt(cardNumber.getValue().toString()) + 1);
            switch (player) {
                case 1:
                    Image newimg = p1Hand.get(Integer.parseInt(cardNumber.getValue().toString()) - 1).getImage().getScaledInstance(289, 400, java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
                    ImageIcon resourse = new ImageIcon(newimg);
                    cardImage.setIcon(resourse);
                    break;
                case 2:
                    newimg = p2Hand.get(Integer.parseInt(cardNumber.getValue().toString()) - 1).getImage().getScaledInstance(289, 400, java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
                    resourse = new ImageIcon(newimg);
                    cardImage.setIcon(resourse);
                    break;
                case 3:
                    newimg = p3Hand.get(Integer.parseInt(cardNumber.getValue().toString()) - 1).getImage().getScaledInstance(289, 400, java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
                    resourse = new ImageIcon(newimg);
                    cardImage.setIcon(resourse);
                    break;
                case 4:
                    newimg = p4Hand.get(Integer.parseInt(cardNumber.getValue().toString()) - 1).getImage().getScaledInstance(289, 400, java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
                    resourse = new ImageIcon(newimg);
                    cardImage.setIcon(resourse);
                    break;
            }
        }
    }//GEN-LAST:event_rightArrowActionPerformed

    private void selectPlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectPlayerActionPerformed
        // TODO add your handling code here:
        targetBox.setVisible(false);
    }//GEN-LAST:event_selectPlayerActionPerformed

    private void noButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noButtonActionPerformed
        // TODO add your handling code here:
        switch (player) {
            case 1:
                addPoints("-" + Integer.toString(p1Hand.get(Integer.parseInt(cardNumber.getValue().toString()) - 1).getPoints()));
                p1Hand.remove(Integer.parseInt(cardNumber.getValue().toString()) - 1);
                p1Hand.add(nextCard(randNum));
                break;
            case 2:
                addPoints("-" + Integer.toString(p2Hand.get(Integer.parseInt(cardNumber.getValue().toString()) - 1).getPoints()));
                p2Hand.remove(Integer.parseInt(cardNumber.getValue().toString()) - 1);
                p2Hand.add(nextCard(randNum));
                break;
            case 3:
                addPoints("-" + Integer.toString(p3Hand.get(Integer.parseInt(cardNumber.getValue().toString()) - 1).getPoints()));
                p3Hand.remove(Integer.parseInt(cardNumber.getValue().toString()) - 1);
                p3Hand.add(nextCard(randNum));
                break;
            case 4:
                addPoints("-" + Integer.toString(p4Hand.get(Integer.parseInt(cardNumber.getValue().toString()) - 1).getPoints()));
                p4Hand.remove(Integer.parseInt(cardNumber.getValue().toString()) - 1);
                p4Hand.add(nextCard(randNum));
                break;
        }
        gambleBox.setVisible(false);
        pause = false;
    }//GEN-LAST:event_noButtonActionPerformed

    private void yesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yesButtonActionPerformed
        // TODO add your handling code here:
        switch (player) {
            case 1:
                addPoints(Integer.toString(p1Hand.get(Integer.parseInt(cardNumber.getValue().toString()) - 1).getPoints()));
                p1Hand.remove(Integer.parseInt(cardNumber.getValue().toString()) - 1);
                p1Hand.add(nextCard(randNum));
                break;
            case 2:
                addPoints(Integer.toString(p2Hand.get(Integer.parseInt(cardNumber.getValue().toString()) - 1).getPoints()));
                p2Hand.remove(Integer.parseInt(cardNumber.getValue().toString()) - 1);
                p2Hand.add(nextCard(randNum));
                break;
            case 3:
                addPoints(Integer.toString(p3Hand.get(Integer.parseInt(cardNumber.getValue().toString()) - 1).getPoints()));
                p3Hand.remove(Integer.parseInt(cardNumber.getValue().toString()) - 1);
                p3Hand.add(nextCard(randNum));
                break;
            case 4:
                addPoints(Integer.toString(p4Hand.get(Integer.parseInt(cardNumber.getValue().toString()) - 1).getPoints()));
                p4Hand.remove(Integer.parseInt(cardNumber.getValue().toString()) - 1);
                p4Hand.add(nextCard(randNum));
                break;
        }
        gambleBox.setVisible(false);
        pause = false;
    }//GEN-LAST:event_yesButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel P1Points;
    private javax.swing.JLabel P2Points;
    private javax.swing.JLabel P3Points;
    private javax.swing.JLabel P4Points;
    private javax.swing.JLabel cardDisplayed;
    private javax.swing.JLabel cardImage;
    private javax.swing.JSpinner cardNumber;
    private javax.swing.JSpinner challengedPlayer;
    private javax.swing.JTextArea displayBox;
    private javax.swing.JDialog gambleBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton leftArrow;
    private javax.swing.JButton noButton;
    private javax.swing.JButton passTurn;
    private javax.swing.JButton playCard;
    private javax.swing.JSpinner playerSelect;
    private javax.swing.JLabel playerTurn;
    private javax.swing.JButton rightArrow;
    private javax.swing.JButton selectPlayer;
    private javax.swing.JToggleButton showHand;
    private javax.swing.JButton switchPlayer;
    private javax.swing.JDialog targetBox;
    private javax.swing.JButton yesButton;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
